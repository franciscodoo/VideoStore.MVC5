@model Vidly.ViewModels.CustomerFormViewModel
@{
    ViewBag.Title = "New";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>New Customer</h2>

@*Using: disposes and closes tag*@
@* Target action: Save*@
@using (@Html.BeginForm("Save","Customers")) 
{
    //Validation Summary
    @Html.ValidationSummary(true, "Please fix the following errors:") //exclude property errors and supply error message
    
    <div class="form-group">
        @Html.LabelFor(x => x.Customer.Name)
        @Html.TextBoxFor(x => x.Customer.Name, new { @class = "form-control" }) @*props will be based in Customer.cs props*@
        @Html.ValidationMessageFor(x => x.Customer.Name) @*Validation message*@
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.Customer.MembershipTypeId)
        @Html.DropDownListFor(
            x => x.Customer.MembershipTypeId,
            new SelectList(
                Model.MembershipTypes, @*List of Items*@
                "Id",  @*Property that holds the value for each item*@
                "Name"), @*Property that holds the text for each item*@
            "Select Membership Type", @*Default option*@
            new { @class = "form-control" })
        @Html.ValidationMessageFor(x => x.Customer.MembershipTypeId)
    </div>
    <div class="form-group">
        @*<label for="Birthdate">Date of Birth:</label> would maintain focus while changing the default name but if the name of prop is changed - error*@
        @*Alternatively attribute [Display(Name = "...")] can be added on Customer.cs attribute - con: code must be compiled when changed *@

        @Html.LabelFor(x => x.Customer.Birthdate)
        @Html.TextBoxFor(x => x.Customer.Birthdate,"{0:d MMM yyyy}" ,new { @class = "form-control" }) 
        @Html.ValidationMessageFor(x => x.Customer.Birthdate)
    </div>
    <div class="form-group">
        @Html.CheckBoxFor(x => x.Customer.IsSubscribedToNewsletter) Subscribed to Newsletter? 
    </div>
    @Html.AntiForgeryToken(); //AntiForgeryToken to avoid CSRF Attacks
    @Html.HiddenFor(x => x.Customer.Id)
    <button type ="submit" class="btn btn-primary">Save</button> 
    
}

@section scripts
{
    @*client-side validation*@
    @*NOTE: Custom Validation Attributes does NOT have client-side support*@
    @*To check if server-side validation is on/off: view network tab on browser's dev tools*@

    @Scripts.Render("~/bundles/jqueryval")   
}
