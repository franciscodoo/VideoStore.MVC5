@model List<Vidly.Models.Customer>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Customers</h2>

@if (Model.Count == 0)
{
    <text>No customers yet...</text>
}
else
{
    <table id="customers" class="table table-bordered">
        <thead>
            <tr>
                <th>Customer Name</th>
                <th>Membership Type</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in Model)
            {
                <tr>
                    <td>@Html.ActionLink(@customer.Name, "Edit", "Customers", new { Id = customer.Id }, null)</td> @* null forces compiler to use inline object as the route parameters*@
                    @*accessing MembershipType through customer obj. This generates error because by default Entity Framework only loads customer objects, not related objs, so MembershipType is null.
                        Must load them together - Eager Loading  *@
                    <td>@customer.MembershipType.Name</td>
                    <td><button data-customer-id="@customer.Id" class="btn-link js-delete">Delete</button></td> @*btn-link: bootstrap class button like link*@
                </tr>
            }
        </tbody>
    </table>
}
@section scripts
{
    <script>
        $(document).ready(function ()
        {
            $("#customers .js-delete").on("click", function ()
            {
                var button = $(this);

                //bootbox.confirm("Are you sure that you want to delete this customer?", function (result)
                if (confirm("Are you sure that you want to delete this customer?"))
                {
                    $.ajax(
                            {
                                async: true,
                                url: "/api/customers/" + $(button).attr("data-customer-id"),
                                method: "DELETE",
                                success: function ()
                                {
                                    @*Must use button var and not 'this' because in JS scope of 'this' can change in different callback functions*@
                                    button.parents("tr").remove();
                                    alert("Customer deleted!");
                                }
                            });
                }
            });
        });
    </script>
}
